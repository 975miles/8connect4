{"version":3,"sources":["Dialog/index.js","Dialog/show.js","socket/Connect/ing.js","socket/Connect/Failed.js","Home/CodeInput.js","Home/NameInput.js","Home/index.js","Lobby/index.js","Match/index.js","Results/index.js","Match/shuffleString.js","Match/images.js","Match/controller.js","Match/gameplay.js","socket/index.js"],"names":["Dialog","props","state","open","handleOpen","bind","handleClose","this","setState","classes","onClose","disablePortal","aria-labelledby","aria-describedby","disableBackdropClick","required","disableEscapeKeyDown","DialogTitle","id","title","DialogContent","dividers","DialogContentText","className","text","description","children","DialogActions","Button","onClick","color","buttonText","buttonAction","React","Component","withStyles","theme","margin","showDialog","a","Promise","res","Object","assign","ReactDOM","render","ref","element","dialog","document","getElementById","setTimeout","Connecting","CircularProgress","ConnectFailed","error","variant","window","location","reload","CodeInput","code","changeInput","tryCode","event","target","value","replace","socket","emit","htmlFor","FormControl","clsx","textField","InputLabel","FilledInput","type","onChange","inputProps","textInput","maxLength","onKeyDown","e","key","endAdornment","InputAdornment","position","IconButton","aria-label","edge","spacing","marginBottom","joinLabel","display","marginTop","marginRight","width","textTransform","useStyles","makeStyles","input","label","textAlign","NameInput","useState","localStorage","name","setName","changeName","newName","first","Grid","container","justify","alignItems","item","TextField","activeElement","blur","InputLabelProps","logoImage","maxWidth","controls","border","borderRadius","Home","Typography","gutterBottom","class","src","alt","Divider","size","root","privacyIcon","table","head","backgroundColor","tableCell","you","fontWeight","Lobby","tableBody","i","matchInfo","maxPlayers","content","players","startsWith","push","TableRow","TableCell","public","Tooltip","TableContainer","component","Paper","Table","TableHead","length","TableBody","gameInfo","justifyContent","top","borderBottom","zIndex","flexGrow","gameInfoTitle","gameInfoContent","playerArea","paddingTop","paddingBottom","selfGameImage","otherGameImage","playingGamesContainer","playingGames","flexWrap","otherGamesContainer","otherGames","vsMe","GameImage","colour","keys","game","find","c","playerId","opponent","player","data-playercolour","playerColour","self","myId","PlayerGames","gameRowClass","games","filter","map","b","Match","selfPlayer","gamesContainer","marginLeft","gameImage","counterImage","height","otherPlayer","Results","playerClass","winnersStop","results","score","slice","join","placement","outcome","getRandomInt","n","Math","floor","random","shuffleString","s","arr","split","j","temp","images","Image","outcomeOverlay","img","boxSize","canvas","createElement","ctx","getContext","slot","turn","clearRect","fillStyle","boardWidth","fillRect","bbox","getBoundingClientRect","x","clientX","left","y","clientY","newSlot","image","complete","drawImage","addEventListener","gamesLeft","gameNameChars","intervals","turnNumber","turnTimerEnd","Date","now","showTimer","timeLeft","innerHTML","toFixed","switchTurn","newTurn","turnTime","getElementsByClassName","classList","add","remove","hover","controller","drawCounter","column","row","Number","drawBoard","overlayImage","piece","globalAlpha","boardHeight","toDataURL","drawBoardsOfId","board","socketIOClient","serverLocation","connectedOnce","displayConnectionFail","toString","disconnect","on","started","startingMatchInfo","sentId","gameNames","appendChild","timer","setInterval","gameplay","gameId","querySelectorAll","boardId","relativeOutcome","getAttribute","clearInterval","sort","indexOf"],"mappings":"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","file":"static/js/main.e1d21cb6.chunk.js","sourcesContent":["import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport MUIDialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nconst useStyles = theme => ({\n    text: {\n        margin: 0,\n    },\n});\n\nclass Dialog extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            open: false,\n        };\n        this.handleOpen = this.handleOpen.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n    }\n\n    handleOpen() {\n        this.setState({open: true});\n    };\n\n    handleClose() {\n        this.setState({open: false});\n    };\n\n    render() {\n        const { classes } = this.props;\n\n        return (\n            <div>\n                <MUIDialog\n                    open={this.state.open}\n                    onClose={this.handleClose}\n                    disablePortal\n                    aria-labelledby=\"alert-dialog-title\"\n                    aria-describedby=\"alert-dialog-description\"\n                    disableBackdropClick={this.props.required}\n                    disableEscapeKeyDown={this.props.required}\n                >\n                    <DialogTitle id=\"alert-dialog-title\">{this.props.title}</DialogTitle>\n                    <DialogContent dividers>\n                        <DialogContentText className={classes.text} id=\"alert-dialog-description\">\n                            {this.props.description}\n                        </DialogContentText>\n                        {this.props.children}\n                    </DialogContent>\n                    <DialogActions>\n                        {this.props.required ? null : (\n                            <Button onClick={this.handleClose} color=\"primary\">\n                                Close\n                            </Button>\n                        )}\n                        {this.props.buttonText ? (\n                            <Button onClick={this.props.buttonAction} color=\"primary\">\n                                {this.props.buttonText}\n                            </Button>\n                        ) : null}\n                    </DialogActions>\n                </MUIDialog>\n            </div>\n        );\n    }\n}\n\nexport default withStyles(useStyles)(Dialog);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Dialog from './';\n\nasync function showDialog(props = {}, children = null) {\n    return new Promise(async res => {\n        props = Object.assign({\n            title: 'Dialog title',\n            required: false,\n        }, props);\n    \n        let dialog;\n        ReactDOM.render((\n            <Dialog {...props} ref={element => dialog = element}>\n                {children}\n            </Dialog>\n        ), document.getElementById('dialog'));\n        \n        if (!dialog) //if it didnt work,\n            setTimeout(async () => res(await showDialog(props, children)), 100); //try it again with a delay (yes i know i shouldnt but shut up it works)\n        else {\n            dialog.handleOpen();\n            res(dialog);\n        }\n    });\n}\n\nexport default showDialog;","import React from 'react';\nimport './centred.css';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nfunction Connecting() {\n    return (\n        <div className=\"centred\">\n            <CircularProgress />\n            <h3>Attempting to connect to the 8connect4 server...</h3>\n        </div>\n    );\n}\n\nexport default Connecting;","import React from 'react';\nimport './centred.css';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport Button from '@material-ui/core/Button';\n\nfunction ConnectFailed(props) {\n    return (\n        <div className=\"centred\">\n            <ClearIcon />\n            <h3>Failed to connect to the 8connect4 server.</h3>\n            {props.error ? <p>Error: \"{props.error}\"</p> : null}\n            <h4>Are you offline? If not, the 8connect4 server might be down.</h4>\n            <Button variant=\"contained\" color=\"primary\" onClick={() => window.location.reload(false)}>Retry</Button>\n        </div>\n    );\n}\n\nexport default ConnectFailed;","import React from 'react';\nimport socket from '../socket/';\nimport clsx from 'clsx';\nimport { withStyles } from '@material-ui/core/styles';\nimport FormControl from '@material-ui/core/FormControl';\nimport FilledInput from '@material-ui/core/FilledInput';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport IconButton from '@material-ui/core/IconButton';\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\n\nconst useStyles = theme => ({\n    margin: {\n        margin: theme.spacing(1),\n        marginBottom: 0,\n    },\n    joinLabel: {\n        display: 'inline-block',\n        marginTop: 22,\n        marginRight: 4,\n    },\n    textField: {\n        width: '18ch',\n    },\n    textInput: {\n        textTransform: 'uppercase',\n    },\n});\n\nclass CodeInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            code: '',\n        };\n        this.changeInput = this.changeInput.bind(this);\n        this.tryCode = this.tryCode.bind(this);\n    }\n\n    changeInput(event) {\n        let code = event.target.value; //get the code entered from the input element\n        code = code.replace(' ', ''); //remove spaces, if any\n        this.setState({code}); //store the code in the state, so that it can be shown on the input element and accessed when the join button is clicked\n    }\n\n    tryCode() {\n        socket.emit('joinMatch', this.state.code);\n    }\n\n    render() {\n        const { classes } = this.props;\n\n        return (\n            <div>\n                <label {...{}/*className={classes.joinLabel}*/} htmlFor=\"roomCodeInput\">Or, join by code:</label>\n                <br />\n\n                <FormControl className={clsx(classes.margin, classes.textField)} variant=\"filled\">\n                    <InputLabel htmlFor=\"roomCodeInput\">Room code</InputLabel>\n                    <FilledInput\n                        id=\"roomCodeInput\"\n                        type=\"text\"\n                        value={this.state.code}\n                        onChange={this.changeInput}\n                        inputProps={{\n                            className: classes.textInput,\n                            maxLength: 6,\n                            onKeyDown: e => {if (e.key == 'Enter') this.tryCode()},\n                        }}\n                        endAdornment={\n                            <InputAdornment position=\"end\">\n                                <IconButton\n                                    aria-label=\"Join\"\n                                    onClick={this.tryCode}\n                                    edge=\"end\"\n                                >\n                                    <ArrowForwardIcon />\n                                </IconButton>\n                            </InputAdornment>\n                        }\n                    />\n                </FormControl>\n            </div>\n        );\n    }\n}\n\nexport default withStyles(useStyles)(CodeInput);","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\nimport socket from '../socket';\n\nconst useStyles = makeStyles((theme) => ({\n    margin: {\n        margin: theme.spacing(1),\n    },\n    input: {\n        width: 250,\n    },\n    label: {\n        textAlign: 'center',\n    },\n}));\n\nfunction NameInput() {\n    const classes = useStyles();\n    const [name, setName] = React.useState(localStorage.name ? localStorage.name : '');\n    const changeName = (newName, first = false) => {\n        if (!first)\n            setName(newName);\n        localStorage.name = newName;\n        socket.emit('changeName', newName);\n    }\n    changeName(name, true);\n\n    const handleChange = event => changeName(event.target.value)\n\n    return (\n        <div className={classes.margin}>\n            <Grid container justify=\"center\" spacing={1} alignItems=\"flex-end\">\n                <Grid item>\n                    <AccountCircle />\n                </Grid>\n                <Grid item>\n                    <TextField\n                        id=\"nameInput\"\n                        label=\"Your name\"\n                        value={name}\n                        onChange={handleChange}\n                        inputProps={{\n                            className: classes.input,\n                            maxLength: 12,\n                            onKeyDown: e => {if (e.key == 'Enter') document.activeElement.blur()},\n                        }}\n                        InputLabelProps={{\n                            className: classes.label,\n                        }}\n                    />\n                </Grid>\n            </Grid>\n        </div>\n    );\n}\n\nexport default NameInput","import React from 'react';\nimport { Typography, Button, Divider } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CodeInput from './CodeInput';\nimport NameInput from './NameInput';\nimport socket from '../socket';\nimport { Autorenew } from '@material-ui/icons';\n\nconst useStyles = makeStyles({\n    logoImage: {\n        display: 'block',\n        textAlign: 'center',\n        margin: 'auto',\n        maxWidth: 350,\n    },\n\n    controls: {\n        textAlign: 'center',\n        border: '1px solid #0000001f',\n        borderRadius: 10,\n    },\n});\n\nfunction Home() {\n    const classes = useStyles();\n\n    return (\n        <div>\n            <Typography className={classes.title} variant=\"h3\" gutterBottom><img class={classes.logoImage} src=\"/icon.png\" alt=\"8connect4\" /></Typography>\n\n            \n\n            <Typography variant=\"body1\" gutterBottom>\n                Play 8 games of connect 4 at once.\n            </Typography>\n\n            <div className={classes.controls}>\n                <NameInput />\n\n                <Divider />\n                <br />\n\n                <Button variant=\"contained\" size=\"large\" color=\"primary\" onClick={() => socket.emit('findMatch')}>Find Match</Button>\n                <br />\n                <Button variant=\"contained\" size=\"small\" color=\"secondary\" onClick={() => socket.emit('createMatch', 0)}>Create Private Match (9P)</Button>\n                <br />\n                <Button variant=\"contained\" size=\"small\" color=\"default\" onClick={() => socket.emit('createMatch', 1)}>Create Private Match (5P)</Button>\n\n                <br /><br /><br />\n\n                <CodeInput />\n            </div>\n        </div>\n    );\n}\n\nexport default Home;","import React from 'react';\nimport { Typography, Tooltip, IconButton, Paper, TableContainer, Table, TableHead, TableBody, TableRow, TableCell } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport MeetingRoomIcon from '@material-ui/icons/MeetingRoom';\nimport PublicIcon from '@material-ui/icons/Public';\nimport LockIcon from '@material-ui/icons/Lock';\nimport socket from '../socket';\n\nconst useStyles = makeStyles({\n    root: {\n        textAlign: 'center',\n    },\n\n    privacyIcon: {\n        marginRight: 10\n    },\n\n    table: {\n        width: 400,\n        margin: 'auto',\n    },\n\n    head: {\n        backgroundColor: 'lightgrey',\n    },\n\n    tableCell: {\n        textAlign: 'center',\n    },\n\n    you: {\n        color: 'red',\n        fontWeight: 'bold',\n    },\n});\n\nfunction Lobby(props) {\n    const classes = useStyles();\n\n    let tableBody = [];\n    for (let i = 0; i < props.matchInfo.maxPlayers; i++) {\n        let content = '';\n        let you = false\n        if (i in props.matchInfo.players) {\n            content = props.matchInfo.players[i].name;\n            you = socket.id.startsWith(props.matchInfo.players[i].id);\n        }\n        tableBody.push(\n            <TableRow key={i}>\n                <TableCell className={classes.tableCell}>\n                    {you ? <span className={classes.you}>{content}</span> : content}\n                </TableCell>\n            </TableRow>\n        );\n    }\n\n    return (\n        <div>\n            <IconButton onClick={() => window.location.reload()}>\n                <MeetingRoomIcon />\n            </IconButton>\n            <div className={classes.root}>\n                <Typography variant=\"overline\" display=\"block\" gutterBottom>\n                    Room code\n                </Typography>\n                <Typography variant=\"h3\" gutterBottom>\n                    <span className={classes.privacyIcon}>\n                        {props.matchInfo.public ? <Tooltip title=\"This is a public match. Anyone can join this match from the 'Find Match' button on the homepage.\"><PublicIcon /></Tooltip> : <Tooltip title=\"This is a private match. Only people with the room code can join.\"><LockIcon /></Tooltip>}\n                    </span>\n                    {props.matchInfo.code}\n                </Typography>\n\n                \n                <TableContainer component={Paper}>\n                    <Table>\n                        <TableHead>\n                            <TableRow className={classes.head}>\n                                <TableCell className={classes.tableCell}>\n                                    Players: {props.matchInfo.players.length}/{props.matchInfo.maxPlayers}\n                                </TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {tableBody}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </div>\n        </div>\n    );\n}\n\nexport default Lobby;","import React from 'react';\nimport { Typography, Divider } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport './index.css';\n\nconst useStyles = makeStyles({\n    gameInfo: {\n        display: 'flex',\n        width: '100%',\n        marginBottom: 20,\n        margin: 'auto',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n        position: 'sticky',\n        top: 0,\n        backgroundColor: 'white',\n        borderBottom: '1px solid #0000001f',\n        zIndex: 100,\n        '& div': {\n            flexGrow: 1,\n        },\n    },\n\n    gameInfoTitle: {\n        textAlign: 'center',\n    },\n\n    gameInfoContent: {\n        display: 'flex',\n        alignItems: 'end',\n        justifyContent: 'center',\n        /*textAlign: 'center',\n        '& *': {\n            display: 'inline',\n        },*/\n    },\n\n    title: {\n        textAlign: 'center',\n    },\n\n    playerArea: {\n        paddingTop: 8,\n        paddingBottom: 8,\n        marginBottom: 16,\n        textAlign: 'center',\n        border: '1px solid #0000001f',\n        borderRadius: 10,\n    },\n\n    selfGameImage: {\n        width: 125,\n    },\n\n    otherGameImage: {\n        width: 100,\n    },\n\n    playingGamesContainer: {\n    },\n\n    playingGames: {\n        display: 'flex',\n        maxWidth: 600,\n        margin: 'auto',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n        flexWrap: 'wrap',\n    },\n\n    otherGamesContainer: {\n        display: 'flex',\n        width: '100%',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n        flexWrap: 'wrap',\n    },\n\n    otherGames: {\n        display: 'flex',\n        maxWidth: 600,\n        alignItems: 'center',\n        justifyContent: 'space-between',\n        flexWrap: 'wrap',\n    },\n\n    vsMe: {\n        color: 'red',\n    }\n});\n\nfunction GameImage(props) {\n    const classes = useStyles();\n    let colour = Object.keys(props.game.players).find(c => props.playerId.startsWith(props.game.players[c]));\n    let opponent = props.players.find(player => player.id.startsWith(props.game.players[colour == 'a' ? 'b' : 'a']));// props.players.find(player => player.id.startsWith(Object.values(props.game.players).find(player => !props.playerId.startsWith(player))));\n\n    return (\n        <div>\n            <img data-playercolour={props.playerColour} className={`${props.self ? 'self-game ' : ''}${props.self ? classes.selfGameImage : classes.otherGameImage} game-${colour} game${props.game.id}`} />\n            <Typography variant=\"caption\" display=\"block\">\n                Game {props.game.name} vs {props.myId.startsWith(opponent.id) ? <span className={classes.vsMe}>{opponent.name}</span> : opponent.name}\n            </Typography>\n        </div>\n    );\n}\n\nfunction PlayerGames(props) {\n    const classes = useStyles();\n    let gameRowClass = props.self ? classes.playingGames : classes.otherGames;\n\n    return (\n        <div className={classes.playerArea}>\n            {\n                props.self\n                ?\n                <div>\n                    <Typography variant=\"h4\">{props.player.name}</Typography>\n                    <Divider />\n                </div>\n                :\n                <Typography variant=\"h6\" gutterBottom>{props.player.name}</Typography>\n            }\n            <div className={props.self ? classes.playingGamesContainer : classes.otherGamesContainer}>\n                <div className={gameRowClass}>\n                    {props.self ? <img src=\"/a.png\" /> : null}\n                    {props.games.filter(game => props.player.id.startsWith(game.players.a)).map(game => <GameImage self={props.self} game={game} players={props.players} playerColour={'a'} playerId={props.player.id} myId={props.myId} />)}\n                    {props.self ? null : <img src=\"/a.png\" />}\n                </div>\n                {props.self ? <div id=\"controller\" className={classes.controls} /> : null}\n                <div className={gameRowClass}>\n                    <img src=\"/b.png\" />\n                    {props.games.filter(game => props.player.id.startsWith(game.players.b)).map(game => <GameImage self={props.self} game={game} players={props.players} playerColour={'b'} playerId={props.player.id} myId={props.myId} />)}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nfunction Match(props) {\n    const classes = useStyles();\n    let selfPlayer = props.players.find(player => props.myId.startsWith(player.id));\n\n    return (\n        <div>\n            <div className={classes.gameInfo}>\n                <div>\n                    <div className={classes.gameInfoTitle}>\n                        <Typography variant=\"subtitle1\">\n                            Ongoing games\n                        </Typography>\n                    </div>\n                    <div className={classes.gameInfoContent}>\n                        <Typography variant=\"h3\">\n                            <span id=\"gamesLeft\">0</span>\n                        </Typography>\n                        <Typography variant=\"h5\">\n                            /<span id=\"maxGames\">0</span>\n                        </Typography>\n                    </div>\n                </div>\n\n                <div>\n                    <div className={classes.gameInfoTitle}>\n                        <Typography variant=\"subtitle1\">\n                            Turn time left\n                        </Typography>\n                    </div>\n                    <div className={classes.gameInfoContent}>\n                        <Typography variant=\"h3\">\n                            <span id=\"turnTime\">0</span>\n                        </Typography>\n                    </div>\n                </div>\n\n                <div>\n                    <div className={classes.gameInfoTitle}>\n                        <Typography variant=\"subtitle1\">\n                            Turn\n                        </Typography>\n                    </div>\n                    <div className={classes.gameInfoContent}>\n                        <Typography variant=\"h3\">\n                            <span id=\"turnNumber\">0</span>\n                        </Typography>\n                    </div>\n                </div>\n            </div>\n\n            <div>\n                <PlayerGames player={selfPlayer} players={props.players} games={props.games} self={true} myId={props.myId} />\n                {props.players.filter(player => !props.myId.startsWith(player.id)).map(player => (\n                    <PlayerGames player={player} players={props.players} games={props.games} self={false} myId={props.myId} />\n                ))}\n            </div>\n        </div>\n    );\n}\n\nexport default Match;","import React from 'react';\nimport { Typography, Tooltip, IconButton, Paper, TableContainer, Table, TableHead, TableBody, TableRow, TableCell } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport HomeIcon from '@material-ui/icons/Home';\n//import { gameNameChars } from '../Match/gameplay';\n\nconst useStyles = makeStyles({\n    root: {\n        textAlign: 'center',\n    },\n\n    tableCell: {\n        textAlign: 'center',\n    },\n\n    gamesContainer: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'center',\n        '& div': {\n            marginLeft: 25,\n            marginRight: 25,\n        },\n    },\n\n    gameImage: {\n        width: 150,\n    },\n\n    counterImage: {\n        height: 10,\n    },\n\n    you: {\n        color: 'red',\n    },\n\n    otherPlayer: {\n    },\n});\n\nfunction Results(props) {\n    const classes = useStyles();\n\n    let playerClass = player => {\n        return props.myId.startsWith(player.id) ? classes.you : classes.otherPlayer;\n    }\n\n    let winnersStop = 0;\n    for (let i = 1; i < props.results.length; i++) {\n        if (props.results[i].score == props.results[0].score)\n            winnersStop = i;\n        else\n            break;\n    }\n\n    return (\n        <div>\n            <div className={classes.root}>\n                <IconButton onClick={() => window.location.reload()}>\n                    <HomeIcon />\n                </IconButton>\n\n                <Typography variant=\"h2\">\n                    Winner{winnersStop == 0 ? '' : 's'}:\n                </Typography>\n                <Typography variant=\"h4\" gutterBottom>\n                    {props.results.slice(0, winnersStop+1).map(player => player.name).join(', ')}\n                </Typography>\n\n                <TableContainer component={Paper}>\n                    <Table>\n                        <TableBody>\n                            {props.results.map(player => (\n                                <TableRow>\n                                    <TableCell className={classes.tableCell}>\n                                        {player.placement}. {props.myId.startsWith(player.id) ? <span className={classes.you}>{player.name}</span> : player.name} with a score of {player.score}.\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n\n                <Typography variant=\"h3\">\n                    Games\n                </Typography>\n                <div className={classes.gamesContainer}>\n                    {props.games.map(game => (\n                        <div>\n                            <img src={game.src} className={classes.gameImage} />\n                            <Typography variant=\"caption\" display=\"block\">\n                                Game {game.name}\n                                <br />\n                                <span className={playerClass(game.players.a)}>{game.players.a.name}</span> <img className={classes.counterImage} src=\"/a.png\" /> vs <img className={classes.counterImage} src=\"/b.png\" /> <span className={playerClass(game.players.b)}>{game.players.b.name}</span>\n                                <br />\n                                {game.outcome == null ? 'Draw' : <span>Winner: <img className={classes.counterImage} src={`/${game.outcome}.png`} /></span>}\n                            </Typography>\n                        </div>\n                    ))}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Results;","function getRandomInt(n) {\n    return Math.floor(Math.random() * n);\n}\n\nfunction shuffleString(s) {\n    let arr = s.split('');\n    let n = arr.length;\n\n    for(let i=0 ; i<n-1 ; ++i) {\n        let j = getRandomInt(n);\n        \n        let temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n\n    s = arr.join('');\n    return s;\n}\n\nexport default shuffleString;","const images = {\n    a: new Image(),\n    b: new Image(),\n    outcomeOverlay: {}\n};\n\nfor (let i of ['a', 'b']) {\n    let src = `/${i}.png`;\n    images[i].src = src;\n}\n\nfor (let i of ['win', 'loss', 'draw']) {\n    let img = new Image();\n    img.src = `/outcome/${i}.png`;\n    images.outcomeOverlay[i] = img;\n}\n\nexport default images;","import images from './images';\nimport socket from '../socket';\n\nconst boxSize = 100;\nconst gridlineSize = 4;\nconst boardWidth = 7;\n\nvar canvas = document.createElement('canvas');\ncanvas.width = ((gridlineSize + boxSize) * boardWidth) + gridlineSize;\ncanvas.height = boxSize + (gridlineSize * 2);\nvar ctx = canvas.getContext('2d');\n\nvar slot = null;\nvar turn = 'a';\n\nfunction turnChange(newTurn) {\n    turn = newTurn;\n    slot = null;\n    render();\n}\n\nfunction render(event = null) {\n    ctx.clearRect(0, 0, canvas.width, canvas.height); //clear canvas\n    ctx.fillStyle = 'black';\n\n    for (let i = 0; i < boardWidth + 1; i++)\n        ctx.fillRect((boxSize+gridlineSize)*i, 0, gridlineSize, canvas.height);\n    for (let i = 0; i < 2; i++)\n        ctx.fillRect(0, (boxSize+gridlineSize)*i, canvas.width, gridlineSize);\n\n    if (event != null) {\n        let bbox = event.target.getBoundingClientRect();\n        let x = (event.clientX - bbox.left - gridlineSize) * (canvas.width / bbox.width);\n        let y = (event.clientY - bbox.top - gridlineSize) * (canvas.height / bbox.height);\n        if (x < 0 || y < 0) return;\n\n        if (y >= boxSize) return;\n        if (x%(boxSize+gridlineSize) >= boxSize) return;\n\n        let newSlot = Math.floor(x/(boxSize+gridlineSize));\n        if (slot != newSlot) {\n            slot = newSlot;\n            socket.emit('hover', slot);\n        }\n    }\n\n    if (slot != null) {\n        let image = images[turn];\n        if (image.complete)\n            ctx.drawImage(image, gridlineSize+((boxSize+gridlineSize)*slot), gridlineSize, boxSize, boxSize);\n    }\n}\n\nfunction move() {\n    socket.emit('move', turn, slot);\n    slot = null;\n    socket.emit('hover', slot);\n    render();\n}\n\nrender();\ncanvas.addEventListener('mousemove', render);\ncanvas.addEventListener('touchstart', render);\ncanvas.addEventListener('touchmove', render);\ncanvas.addEventListener('mousedown', move);\n\nexport {\n    canvas,\n    turnChange,\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Match from './';\nimport Results from '../Results';\nimport shuffleString from './shuffleString';\nimport images from './images';\nimport * as controller from './controller';\n\nconst boxSize = 50;\nconst gridlineSize = 4;\nconst boardWidth = 7;\nconst boardHeight = 6;\nconst numberOfGames = 36;\nconst gameNameChars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\n\nvar matchInfo;\nvar myId;\nvar games = [];\nvar gamesLeft;\nvar intervals = [];\nvar turnNumber = 0;\nvar turn = 'a';\nvar turnTimerEnd = Date.now();\n\nvar canvas = document.createElement('canvas');\ncanvas.width = (boxSize * boardWidth) + ((boardWidth + 1) * gridlineSize);\ncanvas.height = (boxSize + gridlineSize) * (boardHeight + 1);\nvar ctx = canvas.getContext('2d');\n\nfunction showTimer() {\n    let timeLeft = (turnTimerEnd - Date.now()) / 1000;\n    if (timeLeft < 0)\n        timeLeft = 0;\n    document.getElementById('turnTime').innerHTML = timeLeft.toFixed(2);\n}\n\nfunction playMatch(startingMatchInfo, sentId) {\n    myId = sentId;\n    matchInfo = startingMatchInfo;\n    turnNumber = 0;\n    let gameNames = shuffleString(gameNameChars);\n    for (let i in startingMatchInfo.games) {\n        let game = startingMatchInfo.games[i];\n        let state = [];\n        for (let y = 0; y < boardHeight; y++) {\n            let column = [];\n            for (let x = 0; x < boardWidth; x++) {\n                column.push(null);\n            }\n            state.push(column);\n        }\n\n        games.push({\n            id: i,\n            name: gameNames[i],\n            players: game.players,\n            state: state,\n        });\n    }\n    gamesLeft = games.length;\n    ReactDOM.render(<Match players={startingMatchInfo.players} games={games} myId={myId} />, document.getElementById('root'), () => {\n        document.getElementById('controller').appendChild(controller.canvas);\n        document.getElementById('maxGames').innerHTML = gamesLeft;\n        document.getElementById('gamesLeft').innerHTML = gamesLeft;\n        for (let i in games)\n            drawBoardsOfId(i);\n        intervals.timer = setInterval(showTimer, 1000/24);\n    });\n}\n\nfunction switchTurn(newTurn) {\n    document.getElementById('turnNumber').innerHTML = ++turnNumber;\n    turn = newTurn;\n    turnTimerEnd = Date.now() + matchInfo.turnTime;\n    for (let element of document.getElementsByClassName(`game-${newTurn == 'a' ? 'b' : 'a'}`))\n        element.classList.add('inactive-game');\n    for (let element of document.getElementsByClassName(`game-${newTurn}`))\n        element.classList.remove('inactive-game');\n    for (let game of games) {\n        game.hover = null;\n    }\n    controller.turnChange(newTurn);\n}\n\nfunction hover(gameId, colour, column) {\n    if (colour == turn)\n        games[gameId].hover = column;\n    drawBoardsOfId(gameId);\n}\n\nfunction move(gameId, colour, column, row) {\n    let game = games[gameId];\n    game.state[column][row] = colour;\n    game.hover = null;\n    drawBoardsOfId(gameId);\n}\n\nfunction takenTurn(colour) {\n    if (colour == turn)\n        for (let i of document.querySelectorAll(`.self-game.game-${colour}`))\n            i.classList.add('inactive-game');\n}\n\nfunction drawCounter(image, column, row) {\n    if (image.complete)\n        ctx.drawImage(image, ((boxSize+gridlineSize)*Number(column))+gridlineSize, (boxSize+gridlineSize)*(Number(row)+1), boxSize, boxSize);\n}\n\nfunction drawBoard(game, overlayImage = null) {\n    ctx.clearRect(0, 0, canvas.width, canvas.height); //clear canvas\n\n    //draw gridlines\n    ctx.fillStyle = 'black';\n    for (let i = 0; i <= boardHeight; i++)\n        ctx.fillRect(0, boxSize+((boxSize+gridlineSize)*i), canvas.width, gridlineSize);\n    for (let i = 0; i <= boardWidth; i++)\n        ctx.fillRect((boxSize+gridlineSize)*i, boxSize, gridlineSize, canvas.height-boxSize);\n\n    for (let i in game.state)\n        for (let j in game.state[i]) {\n            let piece = game.state[i][j];\n            if (piece != null) {\n                drawCounter(images[piece], j, i);\n            }\n        }\n    \n    if (game.hover !== null) {\n        ctx.globalAlpha = 0.5;\n\n        drawCounter(images[turn], game.hover, -1); //draw counter above board\n\n        //draw counter inside board\n        let row = null;       \n        for (let i = 0; i < boardHeight; i++) {\n            if (game.state[i][game.hover] != null) {\n                row = i - 1;\n                break;\n            }\n        }\n        if (row == -1) //if the top slot was full\n            row = false; //skip this turn\n        if (row == null) //if all the slots were empty\n            row = boardHeight - 1; //use the bottom slot\n        if (row !== false) {\n            drawCounter(images[turn], game.hover, row);\n        }\n        \n\n        ctx.globalAlpha = 1; //reset alpha\n    }\n\n    if (overlayImage != null && overlayImage.complete) {\n        ctx.globalAlpha = 0.75;\n        ctx.drawImage(overlayImage, 0, 0, canvas.width, canvas.height);    \n        ctx.globalAlpha = 1; //reset alpha\n    }\n    \n    return canvas.toDataURL();\n}\n\nfunction drawBoardsOfId(id) {\n    let board = drawBoard(games[id]);\n    for (let i of document.getElementsByClassName(`game${id}`))\n        i.src = board;\n}\n\nfunction outcomeDecided(boardId, outcome) {\n    document.getElementById('gamesLeft').innerHTML = --gamesLeft;\n    games[boardId].outcome = outcome;\n\n    for (let i of document.getElementsByClassName(`game${boardId}`)) {\n        i.classList.add('game-outcome-decided');\n        let relativeOutcome, glowColor;\n        if (outcome == null) {\n            relativeOutcome = 'draw';\n            glowColor = 'red';\n        } else if (outcome == i.getAttribute('data-playercolour')) {\n            relativeOutcome = 'win';\n            glowColor = 'green';\n        } else {\n            relativeOutcome = 'loss';\n            glowColor = 'grey';\n        }\n        i.src = drawBoard(games[boardId], images.outcomeOverlay[relativeOutcome]);\n    }\n}\n\nfunction endMatch(results) {\n    for (let i in intervals) {\n        clearInterval(intervals[i]);\n        delete intervals[i];\n    }\n\n    for (let game of games) {\n        game.src = drawBoard(game);\n        for (let i in game.players) {\n            game.players[i] = matchInfo.players.find(player => player.id == game.players[i]);\n        }\n    }\n    games.sort((a, b) => gameNameChars.indexOf(a.name) - gameNameChars.indexOf(b.name));\n\n    ReactDOM.render(<Results myId={myId} results={results} games={games} />, document.getElementById('root'));\n\n    matchInfo = null;\n    games = [];\n    intervals = [];\n}\n\nexport {\n    playMatch,\n    hover,\n    move,\n    takenTurn,\n    drawBoard,\n    switchTurn,\n    outcomeDecided,\n    endMatch,\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport socketIOClient from 'socket.io-client';\nimport serverLocation from './server.json';\nimport showDialog from '../Dialog/show';\nimport Connecting from './Connect/ing';\nimport ConnectFailed from './Connect/Failed';\nimport Home from '../Home';\nimport Lobby from '../Lobby';\nimport * as gameplay from '../Match/gameplay';\n\nvar socket = socketIOClient(serverLocation);\nvar connectedOnce = false;\n\nReactDOM.render(<Connecting />, document.getElementById('root'));\n\nsocket.on('connect', () => {\n    if (!connectedOnce) {\n        connectedOnce = true;\n        ReactDOM.render(<Home />, document.getElementById('root'));\n    }\n});\n\nfunction displayConnectionFail(error) {\n    ReactDOM.render(<ConnectFailed error={error.toString()} />, document.getElementById('root'));\n    socket.disconnect();\n}\n\nsocket.on('connect_error', displayConnectionFail);\nsocket.on('connect_timeout', displayConnectionFail);\nsocket.on('disconnect', displayConnectionFail);\n\nsocket.on('err', (error='Unknown error', title='Error:') => {\n    showDialog({\n        title: title,\n        description: error,\n    });\n});\n\n/*\nsocket.on('disconnect', () => {\n    setTimeout(() => {\n        alert('Lost connection to the 8connect4 server.');\n        window.location.reload();\n    }, 200);\n});\n*/\n\nsocket.on('joinMatch', () => {\n});\n\nsocket.on('matchUpdate', matchInfo => {\n    if (!matchInfo.started)\n        ReactDOM.render(<Lobby matchInfo={matchInfo} />, document.getElementById('root'));\n});\n\nsocket.on('matchStart', matchInfo => gameplay.playMatch(matchInfo, socket.id));\nsocket.on('turnSwitch', newTurn => gameplay.switchTurn(newTurn));\nsocket.on('hover', (gameId, colour, column) => gameplay.hover(gameId, colour, column));\nsocket.on('move', (gameId, colour, column, row) => gameplay.move(gameId, colour, column, row));\nsocket.on('takenTurn', colour => gameplay.takenTurn(colour));\nsocket.on('outcomeDecided', (gameId, outcome) => gameplay.outcomeDecided(gameId, outcome));\nsocket.on('endMatch', results => gameplay.endMatch(results));\n\nexport default socket;"],"sourceRoot":""}